"use client"
import { SafeImage } from "@/components/safe-image"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Phone, Mail, ClipboardList, CheckCircle, Loader2, Share2, MessageCircle } from "lucide-react"
import { CartItem } from "@/lib/cart-context"
import { useOrders } from "@/lib/orders-context"
import { toast } from "sonner"

interface OrderFormProps {
  isOpen: boolean
  onClose: () => void
  items: CartItem[]
  totalPrice: number
  onOrderComplete: () => void
}

export function OrderForm({ isOpen, onClose, items, totalPrice, onOrderComplete }: OrderFormProps) {
  const [formData, setFormData] = useState({
    phone: '',
    email: '',
    notes: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)
  const [errors, setErrors] = useState<{[key: string]: string}>({})
  const [createdOrder, setCreatedOrder] = useState<{id: number, phone: string, email: string, total: number, itemsCount: number, createdAt: string} | null>(null)
  const { refreshOrdersCount } = useOrders()

  const validateForm = () => {
    const newErrors: {[key: string]: string} = {}

    // Validaci√≥n de tel√©fono
    if (!formData.phone.trim()) {
      newErrors.phone = 'El tel√©fono es obligatorio para contacto'
    } else if (!/^[\+]?[0-9\s\-\(\)]{10,}$/.test(formData.phone.trim())) {
      newErrors.phone = 'Ingrese un n√∫mero de tel√©fono v√°lido'
    }

    // Validaci√≥n de email
    if (!formData.email.trim()) {
      newErrors.email = 'El email es obligatorio para contacto'
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email.trim())) {
      newErrors.email = 'Ingrese una direcci√≥n de email v√°lida'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      const orderData = {
        customer_phone: formData.phone.trim(),
        customer_email: formData.email.trim(),
        total_amount: totalPrice,
        notes: formData.notes.trim(),
        items: items.map(item => {
          // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "–ü–æ –∑–∞–ø—Ä–æ—Å—É" —Ü–µ–Ω–∞ –±—É–¥–µ—Ç 0, –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ü–µ–Ω—É –≤ –∞–¥–º–∏–Ω–∫–µ
          const finalPrice = item.is_on_request ? 0 : item.price
          return {
            product_id: item.id,
            product_name: item.name,
            product_price: finalPrice,
            product_image_url: item.image_url,
            quantity: item.quantity,
            total_price: finalPrice * item.quantity,
            sku: item.sku || '',
            article_number: item.article_number || '',
            is_on_request: item.is_on_request || false,
            variant_id: item.variant_id || null,
            configuration: item.configuration || null
          }
        })
      }

      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(orderData),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`–û—à–∏–±–∫–∞ HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏
        refreshOrdersCount()

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
        setCreatedOrder({
          id: result.data.orderId,
          phone: formData.phone.trim(),
          email: formData.email.trim(),
          total: totalPrice,
          itemsCount: items.length,
          createdAt: result.data.createdAt
        })

        setShowSuccess(true)
        setTimeout(() => {
          setShowSuccess(false)
          onOrderComplete()
          onClose()
          // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
          setFormData({ phone: '', email: '', notes: '' })
          setCreatedOrder(null)
        }, 2000)
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
      alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–∫–∞–∑–æ–º
  const shareOrder = async () => {
    if (!createdOrder) return

    const shareText = `üõí –ó–∞–∫–∞–∑ #${createdOrder.id}
üë§ ${createdOrder.phone}
üí∞ ${createdOrder.total.toLocaleString('ru-RU')} ‚ÇΩ
üì¶ ${createdOrder.itemsCount} —Ç–æ–≤–∞—Ä${createdOrder.itemsCount > 1 ? '–æ–≤' : ''}
üìÖ ${new Date(createdOrder.createdAt).toLocaleString('ru-RU')}

–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Share API
    if (typeof navigator !== 'undefined' && 'share' in navigator) {
      try {
        await navigator.share({
          title: `–ó–∞–∫–∞–∑ #${createdOrder.id}`,
          text: shareText,
        })
        toast.success('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      } catch (error) {
        if (error instanceof Error && error.name !== 'AbortError') {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Web Share API:', error)
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ')
        }
      }
    } else {
      // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`
      window.open(whatsappUrl, '_blank')
      toast.success('–ü–µ—Ä–µ—Ö–æ–¥ –≤ WhatsApp...')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
  const isWebShareSupported = () => {
    return typeof navigator !== 'undefined' && 'share' in navigator
  }

  if (showSuccess) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-md bg-white/95 backdrop-blur-xl border border-blue-200/50 shadow-2xl shadow-blue-200/20">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-sky-600 to-blue-700 bg-clip-text text-transparent">
              –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
            </DialogTitle>
            <DialogDescription className="text-slate-600">
              –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            </DialogDescription>
          </DialogHeader>
          <div className="text-center py-6">
            <div className="mx-auto mb-6 w-16 h-16 bg-gradient-to-r from-green-400 to-green-500 rounded-full flex items-center justify-center">
              <CheckCircle className="w-8 h-8 text-white" />
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
            {createdOrder && (
              <div className="bg-gradient-to-r from-sky-50/50 to-blue-50/40 backdrop-blur-sm rounded-xl p-4 border border-blue-200/30 mb-6">
                <div className="text-left space-y-2">
                  <p className="text-sm text-slate-600">
                    <span className="font-medium">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span> #{createdOrder.id}
                  </p>
                  <p className="text-sm text-slate-600">
                    <span className="font-medium">–°—É–º–º–∞:</span> {createdOrder.total.toLocaleString('ru-RU')} ‚ÇΩ
                  </p>
                  <p className="text-sm text-slate-600">
                    <span className="font-medium">–¢–æ–≤–∞—Ä–æ–≤:</span> {createdOrder.itemsCount} —à—Ç.
                  </p>
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è */}
            <div className="flex gap-3 mb-4">
              {isWebShareSupported() ? (
                <Button
                  onClick={shareOrder}
                  className="flex-1 bg-gradient-to-r from-sky-400 to-blue-600 hover:from-sky-500 hover:to-blue-700 text-white"
                  size="sm"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–∫–∞–∑–æ–º
                </Button>
              ) : (
                <Button
                  onClick={shareOrder}
                  className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white"
                  size="sm"
                >
                  <MessageCircle className="w-4 h-4 mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
                </Button>
              )}
            </div>

            <div className="w-16 h-1 bg-gradient-to-r from-sky-400 to-blue-600 rounded-full mx-auto"></div>
          </div>
        </DialogContent>
      </Dialog>
    )
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl bg-white/95 backdrop-blur-xl border border-blue-200/50 shadow-2xl shadow-blue-200/20 max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-sky-600 to-blue-700 bg-clip-text text-transparent flex items-center gap-2">
                          <ClipboardList className="w-6 h-6 text-blue-600" />
            –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </DialogTitle>
          <DialogDescription className="text-slate-600">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
          <div className="bg-gradient-to-r from-sky-50/50 to-blue-50/40 backdrop-blur-sm rounded-2xl p-6 border border-blue-200/30">
            <h3 className="text-lg font-semibold mb-4 text-slate-800 flex items-center gap-2">
              <Phone className="w-5 h-5 text-blue-600" />
              –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="phone" className="text-slate-700 font-medium">
                  N√∫mero de tel√©fono *
                </Label>
                <Input
                  id="phone"
                  type="tel"
                  placeholder="+7 (999) 123-45-67"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  className={`bg-white/80 border-blue-200/50 focus:border-blue-400 focus:ring-blue-400/20 ${
                    errors.phone ? 'border-sky-300 focus:border-sky-400' : ''
                  }`}
                />
                {errors.phone && (
                  <p className="text-slate-600 text-sm">{errors.phone}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="text-slate-700 font-medium">
                  Email –∞–¥—Ä–µ—Å *
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="example@email.com"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className={`bg-white/80 border-blue-200/50 focus:border-blue-400 focus:ring-blue-400/20 ${
                    errors.email ? 'border-sky-300 focus:border-sky-400' : ''
                  }`}
                />
                {errors.email && (
                  <p className="text-slate-600 text-sm">{errors.email}</p>
                )}
              </div>
            </div>

            <div className="mt-4 space-y-2">
              <Label htmlFor="notes" className="text-slate-700 font-medium">
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
              </Label>
              <Textarea
                id="notes"
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã..."
                value={formData.notes}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleInputChange('notes', e.target.value)}
                className="bg-white/80 border-blue-200/50 focus:border-blue-400 focus:ring-blue-400/20 min-h-[80px]"
              />
            </div>
          </div>

          {/* –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞ */}
          <div className="bg-gradient-to-r from-sky-50/50 to-blue-50/40 backdrop-blur-sm rounded-2xl p-6 border border-blue-200/30">
            <h3 className="text-lg font-semibold mb-4 text-slate-800">
              –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞
            </h3>

            <div className="space-y-3">
              {items.map((item) => (
                <div key={item.id} className="flex items-center justify-between py-2 border-b border-blue-200/30 last:border-0">
                  <div className="flex items-center gap-3">
                    <SafeImage src={item.image_url} alt={item.name} width={48} height={48} className="w-12 h-12 rounded-lg object-cover border border-blue-200/30" />
                    <div>
                      <p className="font-medium text-slate-800">{item.name}</p>
                      <p className="text-sm text-slate-600">
                        {item.quantity} —à—Ç.
                        {item.is_on_request ? ' (—Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É)' : ` √ó ${item.price.toLocaleString('ru-RU')} ‚ÇΩ`}
                      </p>
                    </div>
                  </div>
                  <p className="font-semibold text-slate-800">
                    {item.is_on_request ? '–ü–æ –∑–∞–ø—Ä–æ—Å—É' : (item.price * item.quantity).toLocaleString('ru-RU') + ' ‚ÇΩ'}
                  </p>
                </div>
              ))}

              <div className="flex justify-between items-center pt-4 border-t border-blue-300/50">
                <p className="text-lg font-bold text-slate-800">–ò—Ç–æ–≥–æ:</p>
                <p className="text-xl font-bold bg-gradient-to-r from-sky-400 to-blue-600 bg-clip-text text-transparent">
                  {totalPrice.toLocaleString('ru-RU')} ‚ÇΩ
                </p>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-4 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              className="flex-1 bg-gradient-to-r from-slate-50 to-slate-100 border-slate-200 text-slate-700 hover:from-slate-100 hover:to-slate-200 hover:border-slate-300 transition-all duration-300"
              disabled={isSubmitting}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-gradient-to-r from-sky-400 to-blue-600 hover:from-sky-500 hover:to-blue-700 text-white border-0 transition-all duration-300 shadow-lg shadow-blue-200/30 hover:shadow-xl hover:shadow-blue-300/40 hover:scale-[1.02]"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...
                </>
              ) : (
                <>
                  <Mail className="w-4 h-4 mr-2" />
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                </>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}