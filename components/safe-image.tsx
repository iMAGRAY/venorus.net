"use client"

import React, { useState, useCallback } from "react"
import Image from "next/image"
import { PROSTHETIC_FALLBACK_IMAGE } from "@/lib/fallback-image"

interface SafeImageProps {
  src: string
  alt: string
  fill?: boolean
  width?: number
  height?: number
  className?: string
  sizes?: string
  priority?: boolean
  onError?: (e: React.SyntheticEvent<HTMLImageElement>) => void
  onLoad?: (e: React.SyntheticEvent<HTMLImageElement>) => void
  placeholder?: "blur" | "empty"
  blurDataURL?: string
}

/**
 * SafeImage - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Next.js Image
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ unoptimized –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
export function SafeImage({
  src,
  alt,
  fill,
  width,
  height,
  className = "",
  sizes,
  priority = false,
  onError,
  onLoad,
  placeholder,
  blurDataURL
}: SafeImageProps) {
  const isS3Image = /s3\.twcstorage\.ru/i.test(src)
  const isLocalFile = src?.includes('/uploads/') || src?.startsWith('/uploads/')
  // Only treat truly local uploads as problematic, not external HTTP/HTTPS URLs
  const isExternalUrl = src?.startsWith('http://') || src?.startsWith('https://')
  const shouldUseFallback = isLocalFile && !isExternalUrl
  
  // Debug logging
  if (src?.includes('s3.twcstorage.ru')) {
    console.log('üñºÔ∏è SafeImage S3 Debug:', {
      src,
      isS3Image,
      isLocalFile,
      isExternalUrl,
      shouldUseFallback
    })
  }
  
  const [useUnoptimized, setUseUnoptimized] = useState(isS3Image)
  const [currentSrc, setCurrentSrc] = useState(shouldUseFallback ? PROSTHETIC_FALLBACK_IMAGE : src)
  const [hasError, setHasError] = useState(false)
  const [errorCount, setErrorCount] = useState(0)

  const handleError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const newErrorCount = errorCount + 1
    setErrorCount(newErrorCount)

    console.warn(`üì∏ SafeImage: Error loading image (${newErrorCount}/3): ${currentSrc}`)

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    if (newErrorCount > 3) {
      console.error(`üì∏ SafeImage: Too many errors (${newErrorCount}), stopping attempts for: ${currentSrc}`)
      setHasError(true)
      onError?.(e)
      return
    }

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–Ω–æ —Ç–æ–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    if (currentSrc === PROSTHETIC_FALLBACK_IMAGE) {
      console.error(`üì∏ SafeImage: Even fallback image failed to load: ${PROSTHETIC_FALLBACK_IMAGE}`)
      setHasError(true)
      onError?.(e)
      return
    }

    // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ unoptimized —Ä–µ–∂–∏–º –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!useUnoptimized && currentSrc !== PROSTHETIC_FALLBACK_IMAGE) {

      setUseUnoptimized(true)
      return
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ unoptimized —Ä–µ–∂–∏–º–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback

      setCurrentSrc(PROSTHETIC_FALLBACK_IMAGE)
      setUseUnoptimized(false) // Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      setHasError(false)
    setErrorCount(0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
    onError?.(e)
  }, [useUnoptimized, currentSrc, onError, errorCount])

  const handleLoad = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {

    setHasError(false)
    setErrorCount(0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    onLoad?.(e)
  }, [onLoad])

  // –û–±–Ω–æ–≤–ª—è–µ–º src –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø–∞
  React.useEffect(() => {
    if (src !== currentSrc && src !== PROSTHETIC_FALLBACK_IMAGE) {
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π src —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
      const isLocal = src?.includes('/uploads/') || src?.startsWith('/uploads/')
      const isExternal = src?.startsWith('http://') || src?.startsWith('https://')
      if (isLocal && !isExternal) {
        setCurrentSrc(PROSTHETIC_FALLBACK_IMAGE)
        setUseUnoptimized(false)
        setHasError(false)
        setErrorCount(0)
        return
      }

      setCurrentSrc(src)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ unoptimized —Ä–µ–∂–∏–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const needsUnoptimized = /s3\.twcstorage\.ru/i.test(src)
      setUseUnoptimized(needsUnoptimized)
      setHasError(false)
      setErrorCount(0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    }
  }, [src, currentSrc])

  // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π div —Å placeholder
  if (hasError) {
    return (
      <div
        className={`${className} bg-slate-100 flex items-center justify-center text-slate-400 text-xs`}
        style={fill ? {} : { width, height }}
      >
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
      </div>
    )
  }

  const imageProps = {
    src: currentSrc,
    alt,
    className,
    sizes,
    priority,
    onError: handleError,
    onLoad: handleLoad,
    placeholder,
    blurDataURL,
    ...(useUnoptimized && { unoptimized: true })
  }

  if (fill) {
    return (
      <Image
        {...imageProps}
        alt={alt}
        fill
      />
    )
  }

  return (
    <Image
      {...imageProps}
      alt={alt}
      width={width}
      height={height}
    />
  )
}