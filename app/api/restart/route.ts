import { NextRequest, NextResponse } from 'next/server'
import { logger } from '@/lib/logger'
import { requireAuth, hasPermission } from '@/lib/auth/database-auth'

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
// Remote Code Execution —á–µ—Ä–µ–∑ /api/restart –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞–π–Ω—é—é —É–≥—Ä–æ–∑—É

export async function POST(request: NextRequest) {
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
  const session = await requireAuth(request)
  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  // –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
  if (!hasPermission(session.user, 'system.deploy') &&
      !hasPermission(session.user, '*')) {
    return NextResponse.json({ error: 'Access denied - system deployment privileges required' }, { status: 403 })
  }

  try {
    logger.warn('üö´ RESTART ENDPOINT DISABLED FOR SECURITY')
    logger.warn(`User ${session.user.username} attempted to use disabled restart endpoint`)
    
    return NextResponse.json({
      error: 'Restart endpoint disabled for security reasons',
      message: 'Use proper CI/CD deployment instead of remote command execution',
      security_note: 'This endpoint was disabled due to Remote Code Execution vulnerability',
      timestamp: new Date().toISOString()
    }, { status: 501 })
    
  } catch (error) {
    logger.error('‚ùå Restart API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({ 
    message: 'Restart API Endpoint',
    status: 'active',
    usage: 'POST with Authorization: Bearer <token>',
    timestamp: new Date().toISOString()
  })
}